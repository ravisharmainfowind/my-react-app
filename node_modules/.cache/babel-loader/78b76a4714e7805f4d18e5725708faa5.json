{"ast":null,"code":"import { API_BASE_URL, ACCESS_TOKEN_NAME } from '../constants/apiConstants';\nconst BASE_URL = 'http://localhost:8000/';\nconst Service = {\n  get: param => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token_base64 = localStorage.getItem(ACCESS_TOKEN_NAME);\n    let token = atob(token_base64); //let token = localStorage.getItem(ACCESS_TOKEN_NAME);\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + param.url, {\n      method: \"GET\",\n      headers: header\n    }).then(response => response.json(), error => {\n      throw new Error(error);\n    });\n  },\n  post: param => {\n    debugger;\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token_base64 = localStorage.getItem(ACCESS_TOKEN_NAME);\n\n    if (token_base64 != null && token_base64 != undefined) {\n      let token = atob(token_base64);\n\n      if (token) {\n        header[\"x-access-token\"] = token;\n        header['Authorization'] = `Bearer ${token}`;\n      }\n    } //let token = localStorage.getItem(ACCESS_TOKEN_NAME);\n\n\n    return fetch(BASE_URL + param.url, {\n      method: \"POST\",\n      headers: header,\n      body: param.body\n    }).then(response => response.json());\n  },\n  put: param => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    }; // let token = localStorage.getItem('token');\n    // if(token) {\n    //     header[\"x-access-token\"] = token;\n    // }\n\n    let token_base64 = localStorage.getItem(ACCESS_TOKEN_NAME);\n\n    if (token_base64 != null && token_base64 != undefined) {\n      let token = atob(token_base64);\n\n      if (token) {\n        header[\"x-access-token\"] = token;\n        header['Authorization'] = `Bearer ${token}`;\n      }\n    }\n\n    return fetch(BASE_URL + param.url, {\n      method: \"PUT\",\n      headers: header,\n      body: param.body\n    }).then(response => response.json());\n  },\n  delete: param => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + param.url, {\n      method: \"DELETE\",\n      headers: header\n    }).then(response => response.json(), error => {\n      throw new Error(error);\n    });\n  },\n\n  getImage(image) {\n    return BASE_URL + '/' + image;\n  }\n\n};\nconst Storage = {\n  isLogedin: param => {\n    return localStorage.getItem('token') !== null;\n  },\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n  get: (key, value) => {\n    return JSON.parse(localStorage.getItem(key));\n  },\n  setString: (key, value) => {\n    localStorage.setItem(key, value);\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('auth');\n  }\n};\nexport { Service, Storage };","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/services/Service.js"],"names":["API_BASE_URL","ACCESS_TOKEN_NAME","BASE_URL","Service","get","param","header","token_base64","localStorage","getItem","token","atob","fetch","url","method","headers","then","response","json","error","Error","post","undefined","body","put","delete","getImage","image","Storage","isLogedin","set","key","value","setItem","JSON","stringify","parse","setString","logout","removeItem"],"mappings":"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","sourcesContent":["import { API_BASE_URL,ACCESS_TOKEN_NAME } from '../constants/apiConstants';\r\n const BASE_URL = 'http://localhost:8000/';\r\n\r\n\r\nconst Service = {\r\n    get: (param) => {\r\n\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n        let token_base64= localStorage.getItem(ACCESS_TOKEN_NAME);\r\n        let token = atob(token_base64);\r\n        //let token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n        return fetch(BASE_URL + param.url, {\r\n            method: \"GET\",\r\n            headers: header\r\n        })\r\n        .then(\r\n            response => response.json(),\r\n            error => {\r\n                throw new Error(error)\r\n            }\r\n        );\r\n    },\r\n    post: (param) => {\r\n        debugger\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token_base64= localStorage.getItem(ACCESS_TOKEN_NAME);\r\n        if(token_base64!=null && token_base64!=undefined ) {\r\n        let token = atob(token_base64);\r\n          if(token) {\r\n            header[\"x-access-token\"] = token;\r\n            header['Authorization'] = `Bearer ${token}`;\r\n         }\r\n        }\r\n        //let token = localStorage.getItem(ACCESS_TOKEN_NAME);\r\n        \r\n      \r\n        return fetch(BASE_URL + param.url, {\r\n            method: \"POST\",\r\n            headers: header,\r\n            body: param.body\r\n        })\r\n        .then(response => response.json())\r\n    },\r\n\r\n    put: (param) => {\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        // let token = localStorage.getItem('token');\r\n        // if(token) {\r\n        //     header[\"x-access-token\"] = token;\r\n        // }\r\n\r\n        let token_base64= localStorage.getItem(ACCESS_TOKEN_NAME);\r\n        if(token_base64!=null && token_base64!=undefined ) {\r\n        let token = atob(token_base64);\r\n          if(token) {\r\n            header[\"x-access-token\"] = token;\r\n            header['Authorization'] = `Bearer ${token}`;\r\n         }\r\n        }\r\n\r\n        return fetch(BASE_URL + param.url, {\r\n            method: \"PUT\",\r\n            headers: header,\r\n            body: param.body\r\n        })\r\n        .then(response => response.json())\r\n    },\r\n\r\n    delete: (param) => {\r\n\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token = localStorage.getItem('token');\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n        return fetch(BASE_URL + param.url, {\r\n            method: \"DELETE\",\r\n            headers: header\r\n        })\r\n        .then(\r\n            response => response.json(),\r\n            error => {\r\n                throw new Error(error)\r\n            }\r\n        );\r\n    },\r\n\r\n    getImage(image) {\r\n        return BASE_URL + '/' + image;\r\n    }\r\n};\r\n\r\nconst Storage = {\r\n    isLogedin: (param) => {  \r\n        return localStorage.getItem('token') !== null;\r\n    },\r\n    set: (key, value) => {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    },\r\n    get: (key, value) => {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    },\r\n    setString: (key, value) => {\r\n        localStorage.setItem(key, value);\r\n    },\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('auth');\r\n    }\r\n};\r\n\r\nexport {Service, Storage};\r\n"]},"metadata":{},"sourceType":"module"}