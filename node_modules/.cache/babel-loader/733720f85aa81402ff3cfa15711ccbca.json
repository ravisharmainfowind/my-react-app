{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataGrid = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState([]); // const [rowData, setRowData] = useState([\n  //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n  //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n  //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n  // ]);\n\n  useEffect(() => {\n    fetch('https://www.ag-grid.com/example-assets/row-data.json').then(result => result.json()).then(rowData => setRowData(rowData));\n  }, []);\n\n  const onButtonClick = e => {\n    const selectedNodes = gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    const selectedDataStringPresentation = selectedData.map(node => `${node.make} ${node.model}`).join(', ');\n    alert(`Selected nodes: ${selectedDataStringPresentation}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400,\n      width: 600\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onButtonClick,\n      children: \"Get selected rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      rowSelection: \"multiple\",\n      onGridReady: params => setGridApi(params.api),\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"make\",\n        sortable: true,\n        filter: true,\n        checkboxSelection: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"model\",\n        sortable: true,\n        filter: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"price\",\n        sortable: true,\n        filter: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataGrid, \"PgAXam5wdBEI/8NysrRhfCncDJ4=\");\n\n_c = DataGrid;\nexport default DataGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataGrid\");","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js"],"names":["React","useState","useEffect","render","AgGridColumn","AgGridReact","DataGrid","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","fetch","then","result","json","onButtonClick","e","selectedNodes","getSelectedNodes","selectedData","map","node","data","selectedDataStringPresentation","make","model","join","alert","height","width","params","api"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,eAA1C;AACA,OAAO,oBAAP;AACA,OAAO,2CAAP;AACA,OAAO,mDAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC,CAHmB,CAKnB;AACA;AACA;AACA;AACA;;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,KAAK,CAAC,sDAAD,CAAL,CACCC,IADD,CACMC,MAAM,IAAIA,MAAM,CAACC,IAAP,EADhB,EAECF,IAFD,CAEMH,OAAO,IAAIC,UAAU,CAACD,OAAD,CAF3B;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMM,aAAa,GAAGC,CAAC,IAAI;AACvB,UAAMC,aAAa,GAAGZ,OAAO,CAACa,gBAAR,EAAtB;AACA,UAAMC,YAAY,GAAGF,aAAa,CAACG,GAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACC,IAAhC,CAArB;AACA,UAAMC,8BAA8B,GAAGJ,YAAY,CAACC,GAAb,CAAkBC,IAAI,IAAK,GAAEA,IAAI,CAACG,IAAK,IAAGH,IAAI,CAACI,KAAM,EAArD,EAAwDC,IAAxD,CAA6D,IAA7D,CAAvC;AACAC,IAAAA,KAAK,CAAE,mBAAkBJ,8BAA+B,EAAnD,CAAL;AACH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAxC;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEd,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,WAAD;AACI,MAAA,OAAO,EAAEN,OADb;AACsB,MAAA,YAAY,EAAC,UADnC;AAC8C,MAAA,WAAW,EAAGqB,MAAM,IAAIxB,UAAU,CAACwB,MAAM,CAACC,GAAR,CADhF;AAAA,8BAEI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC,MAApB;AAA2B,QAAA,QAAQ,EAAG,IAAtC;AAA6C,QAAA,MAAM,EAAG,IAAtD;AAA6D,QAAA,iBAAiB,EAAG;AAAjF;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC,OAApB;AAA4B,QAAA,QAAQ,EAAG,IAAvC;AAA8C,QAAA,MAAM,EAAG;AAAvD;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC,OAApB;AAA4B,QAAA,QAAQ,EAAG,IAAvC;AAA8C,QAAA,MAAM,EAAG;AAAvD;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CArCD;;GAAM3B,Q;;KAAAA,Q;AAuCN,eAAeA,QAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nconst DataGrid = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState([]);\n\n    // const [rowData, setRowData] = useState([\n    //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n    //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n    //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n    // ]);\n\n    \n\n    useEffect(() => {\n        fetch('https://www.ag-grid.com/example-assets/row-data.json')\n        .then(result => result.json())\n        .then(rowData => setRowData(rowData))\n    }, []);\n\n    const onButtonClick = e => {\n        const selectedNodes = gridApi.getSelectedNodes()\n        const selectedData = selectedNodes.map( node => node.data )\n        const selectedDataStringPresentation = selectedData.map( node => `${node.make} ${node.model}`).join(', ')\n        alert(`Selected nodes: ${selectedDataStringPresentation}`)\n    }\n\n    return (\n        <div className=\"ag-theme-alpine\" style={{ height: 400, width: 600 }}>\n            <button onClick={onButtonClick}>Get selected rows</button>\n            <AgGridReact\n                rowData={rowData} rowSelection=\"multiple\" onGridReady={ params => setGridApi(params.api) }>\n                <AgGridColumn field=\"make\" sortable={ true } filter={ true } checkboxSelection={ true }></AgGridColumn>\n                <AgGridColumn field=\"model\" sortable={ true } filter={ true }></AgGridColumn>\n                <AgGridColumn field=\"price\" sortable={ true } filter={ true }></AgGridColumn>\n            </AgGridReact>\n        </div>\n    );\n};\n\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}