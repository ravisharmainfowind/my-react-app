{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/my-app/src/components/RegistrationForm/RegistrationForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\";\nimport './RegistrationForm.css';\nimport { API_BASE_URL, ACCESS_TOKEN_NAME } from '../../constants/apiConstants';\nimport { withRouter } from \"react-router-dom\";\nimport { Service } from '../../services/Service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RegistrationForm(props) {\n  _s();\n\n  const [state, setState] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    successMessage: null\n  });\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    //alert(JSON.stringify(data));\n    //console.log(data)\n    handleSubmitClick();\n  };\n\n  const handleChange = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    setState(prevState => ({ ...prevState,\n      [id]: value\n    }));\n  };\n\n  const sendDetailsToServer = () => {\n    if (state.email.length && state.password.length) {\n      props.showError(null);\n      const payload = {\n        \"name\": state.name,\n        \"email\": state.email,\n        \"password\": state.password,\n        \"password_confirmation\": state.confirmPassword\n      };\n      Service.post({\n        url: 'api/auth/register',\n        body: JSON.stringify({\n          \"name\": state.name,\n          \"email\": state.email,\n          \"password\": state.password,\n          \"password_confirmation\": state.confirmPassword\n        })\n      }).then(response => {\n        let data = response;\n\n        if (response.status === 201) {\n          setState({\n            successMessage: data.message\n          });\n          var token = data.access_token;\n          var token_base64 = btoa(token);\n          localStorage.setItem(ACCESS_TOKEN_NAME, token_base64);\n          redirectToHome();\n          props.showError(null);\n        } else {\n          props.showError(\"Some error ocurred\");\n        }\n      }).catch(err => {//console.log(err)\n      }); // axios.post(API_BASE_URL+'api/auth/register', payload)\n      //     .then(function (response) {\n      //         console.log(response)\n      //         if(response.status === 201){\n      //             setState(prevState => ({\n      //                 ...prevState,\n      //                 'successMessage' : 'Registration successful. Redirecting to home page..'\n      //             }))\n      //             var token = response.data.access_token;\n      //             var token_base64 = btoa(token);\n      //             localStorage.setItem(ACCESS_TOKEN_NAME,token_base64);\n      //             redirectToHome();\n      //             props.showError(null)\n      //         } else{\n      //             props.showError(\"Some error ocurred\");\n      //         }\n      //     })\n      //     .catch(function (error) {\n      //         console.log(error);\n      //     });    \n    } else {\n      props.showError('Please enter valid username and password');\n    }\n  };\n\n  const redirectToHome = () => {\n    //debugger\n    props.updateTitle('Home');\n    props.history.push('/home');\n  };\n\n  const redirectToLogin = () => {\n    props.updateTitle('Login');\n    props.history.push('/login');\n  };\n\n  const handleSubmitClick = e => {\n    //e.preventDefault();\n    if (state.password === state.confirmPassword) {\n      sendDetailsToServer();\n    } else {\n      props.showError('Passwords do not match');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card col-12 col-lg-4 login-card mt-2 hv-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group text-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleInputName1\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: register({\n            required: true,\n            minLength: 2\n          }),\n          type: \"text\",\n          className: \"form-control\",\n          id: \"name\",\n          name: \"name\",\n          \"aria-describedby\": \"emailHelp\",\n          placeholder: \"Enter Name\",\n          value: state.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), errors.name && errors.name.type === \"required\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: \"This is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 69\n        }, this), errors.name && errors.name.type === \"minLength\" && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: \"This is field required min length of 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 70\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group text-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleInputEmail1\",\n          children: \"Email address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          className: \"form-control\",\n          id: \"email\",\n          \"aria-describedby\": \"emailHelp\",\n          placeholder: \"Enter email\",\n          value: state.email,\n          onChange: handleChange,\n          ref: register({\n            required: \"required\" //,\n            // pattern: {\n            //   value: /S+@S+.S+/,\n            //   message: \"Entered value does not match email format\"\n            // }\n\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this), errors.email && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: \"This is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group text-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleInputPassword1\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: register({\n            required: true\n          }),\n          type: \"password\",\n          className: \"form-control\",\n          id: \"password\",\n          name: \"password\",\n          placeholder: \"Password\",\n          value: state.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), errors.password && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: \"This is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group text-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"exampleInputPassword1\",\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: register({\n            required: true\n          }),\n          type: \"password\",\n          className: \"form-control\",\n          id: \"confirmPassword\",\n          name: \"confirmPassword\",\n          placeholder: \"Confirm Password\",\n          value: state.confirmPassword,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), errors.confirmPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: \"This is required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 50\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success mt-2\",\n      style: {\n        display: state.successMessage ? 'block' : 'none'\n      },\n      role: \"alert\",\n      children: state.successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Already have an account? \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"loginText\",\n        onClick: () => redirectToLogin(),\n        children: \"Login here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RegistrationForm, \"J/2DEK0TEOVaMiKc660LzyhKUGA=\", false, function () {\n  return [useForm];\n});\n\n_c = RegistrationForm;\nexport default _c2 = withRouter(RegistrationForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RegistrationForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/components/RegistrationForm/RegistrationForm.js"],"names":["React","useState","axios","useForm","API_BASE_URL","ACCESS_TOKEN_NAME","withRouter","Service","RegistrationForm","props","state","setState","email","name","password","confirmPassword","successMessage","register","handleSubmit","errors","onSubmit","data","handleSubmitClick","handleChange","e","id","value","target","prevState","sendDetailsToServer","length","showError","payload","post","url","body","JSON","stringify","then","response","status","message","token","access_token","token_base64","btoa","localStorage","setItem","redirectToHome","catch","err","updateTitle","history","push","redirectToLogin","required","minLength","type","display"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\";\nimport './RegistrationForm.css';\nimport {API_BASE_URL, ACCESS_TOKEN_NAME} from '../../constants/apiConstants';\nimport { withRouter } from \"react-router-dom\";\nimport { Service } from '../../services/Service';\n\nfunction RegistrationForm(props) {\n    const [state , setState] = useState({\n        email : \"\",\n        name : \"\",\n        password : \"\",\n        confirmPassword: \"\",\n        successMessage: null\n    })\n    const { register, handleSubmit, errors } = useForm(); \n    const onSubmit = (data) => {\n         //alert(JSON.stringify(data));\n         //console.log(data)\n         handleSubmitClick()\n    };\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n    const sendDetailsToServer = () => {\n        if(state.email.length && state.password.length) {\n            props.showError(null);\n            const payload={\n                \"name\":state.name,\n                \"email\":state.email,\n                \"password\":state.password,\n                \"password_confirmation\":state.confirmPassword,\n            }\n\n            Service.post({\n              url: 'api/auth/register',\n              body: JSON.stringify({\n                \"name\": state.name,\n                \"email\": state.email,\n                \"password\": state.password,\n                \"password_confirmation\":state.confirmPassword\n              })\n            })\n            .then(response => {\n              let data = response;\n                if(response.status === 201) {\n                    setState({ successMessage: data.message });\n                    var token = data.access_token;\n                    var token_base64 = btoa(token);\n                    localStorage.setItem(ACCESS_TOKEN_NAME,token_base64);\n                    redirectToHome();\n                    props.showError(null)\n                }else{\n                    props.showError(\"Some error ocurred\");\n                }  \n            })\n            .catch(err => {\n            //console.log(err)\n            });\n\n            // axios.post(API_BASE_URL+'api/auth/register', payload)\n            //     .then(function (response) {\n            //         console.log(response)\n            //         if(response.status === 201){\n            //             setState(prevState => ({\n            //                 ...prevState,\n            //                 'successMessage' : 'Registration successful. Redirecting to home page..'\n            //             }))\n            //             var token = response.data.access_token;\n            //             var token_base64 = btoa(token);\n            //             localStorage.setItem(ACCESS_TOKEN_NAME,token_base64);\n            //             redirectToHome();\n            //             props.showError(null)\n            //         } else{\n            //             props.showError(\"Some error ocurred\");\n            //         }\n            //     })\n            //     .catch(function (error) {\n            //         console.log(error);\n            //     });    \n        } else {\n            props.showError('Please enter valid username and password')    \n        }\n        \n    }\n    const redirectToHome = () => {\n        //debugger\n        props.updateTitle('Home')\n        props.history.push('/home');\n    }\n    const redirectToLogin = () => {\n        props.updateTitle('Login')\n        props.history.push('/login'); \n    }\n    const handleSubmitClick = (e) => {\n        //e.preventDefault();\n        if(state.password === state.confirmPassword) {\n            sendDetailsToServer()    \n        } else {\n            props.showError('Passwords do not match');\n        }\n    }\n    return(\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"form-group text-left\">\n                <label htmlFor=\"exampleInputName1\">Name</label>\n                <input ref={register({required:true,minLength:2})}\n                       type=\"text\" \n                       className=\"form-control\" \n                       id=\"name\" \n                       name=\"name\"\n                       aria-describedby=\"emailHelp\" \n                       placeholder=\"Enter Name\" \n                       value={state.name}\n                       onChange={handleChange}\n                />\n                {errors.name && errors.name.type === \"required\" && (<p className=\"error\">This is required</p>)}\n                {errors.name && errors.name.type === \"minLength\" && (<p className=\"error\">This is field required min length of 2</p>)}\n                </div>\n                <div className=\"form-group text-left\">\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                <input\n                       type=\"email\" \n                       name=\"email\"\n                       className=\"form-control\" \n                       id=\"email\" \n                       aria-describedby=\"emailHelp\" \n                       placeholder=\"Enter email\" \n                       value={state.email}\n                       onChange={handleChange}\n                       ref={register({\n                        required: \"required\"\n                        //,\n                        // pattern: {\n                        //   value: /S+@S+.S+/,\n                        //   message: \"Entered value does not match email format\"\n                        // }\n                      })}\n                />\n                {errors.email && (<p className=\"error\">This is required</p>)}\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\n                    <input ref={register({required:true})}\n                        type=\"password\" \n                        className=\"form-control\" \n                        id=\"password\" \n                        name=\"password\"\n                        placeholder=\"Password\"\n                        value={state.password}\n                        onChange={handleChange} \n                    />\n                    {errors.password  && (<p className=\"error\">This is required</p>)}\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Confirm Password</label>\n                    <input ref={register({required:true})}\n                        type=\"password\" \n                        className=\"form-control\" \n                        id=\"confirmPassword\"\n                        name=\"confirmPassword\" \n                        placeholder=\"Confirm Password\"\n                        value={state.confirmPassword}\n                        onChange={handleChange} \n                    />\n                    {errors.confirmPassword  && (<p className=\"error\">This is required</p>)}\n                </div>\n                {/* <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                    onClick={handleSubmitClick}\n                >\n                    Register\n                </button> */}\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                >\n                    Register\n                </button> \n            </form>\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\n                {state.successMessage}\n            </div>\n            <div className=\"mt-2\">\n                <span>Already have an account? </span>\n                <span className=\"loginText\" onClick={() => redirectToLogin()}>Login here</span> \n            </div>\n            \n        </div>\n    )\n}\n\nexport default withRouter(RegistrationForm);"]},"metadata":{},"sourceType":"module"}