{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { API_BASE_URL } from '../../constants/apiConstants';\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataGrid = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState([]);\n  const [showModal, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [state, setState] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    successMessage: null\n  });\n  const {\n    employeeEdit,\n    handleSubmit,\n    errors\n  } = useForm(); // const [rowData, setRowData] = useState([\n  //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n  //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n  //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n  // ]);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n\n    const updateData = data => {\n      setRowData(data);\n    }; //fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n\n\n    fetch(API_BASE_URL + 'api/employees').then(resp => resp.json()).then(data => updateData(data));\n  }; // useEffect(() => {\n  //     fetch('https://www.ag-grid.com/example-assets/row-data.json')\n  //     .then(result => result.json())\n  //     .then(rowData => setRowData(rowData))\n  // }, []);\n\n\n  const onButtonClick = e => {\n    const selectedNodes = gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    const selectedDataStringPresentation = selectedData.map(node => `${node.employee_name} ${node.employee_age}`).join(', ');\n    alert(`Selected nodes: ${selectedDataStringPresentation}`);\n  };\n\n  const onDeleteClick = e => {\n    let self = this;\n    const selectedNodes = gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    const selectedDataStringPresentation = selectedData.map(employeeData => {\n      console.log(employeeData.id);\n      let id = employeeData.id;\n      axios.delete(API_BASE_URL + 'api/employees/' + id).then(function (response) {\n        if (response.status === 202) {\n          //self.setState({ deleteMessage: response.data.message }) \n          //self.getEmployees();\n          window.location.reload();\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }); //alert(`Selected nodes: ${selectedDataStringPresentation}`)\n  };\n\n  const handleChange = e => {\n    this.setState({\n      name: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-alpine\",\n      style: {\n        height: 600,\n        width: 1040\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: onButtonClick,\n        children: \"Get selected rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: onDeleteClick,\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: handleShow,\n        children: \"Edit Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AgGridReact, {\n        rowSelection: \"multiple\",\n        defaultColDef: {\n          width: 150,\n          editable: true,\n          filter: 'agTextColumnFilter',\n          floatingFilter: true,\n          resizable: true\n        },\n        defaultColGroupDef: {\n          marryChildren: true\n        },\n        columnTypes: {\n          numberColumn: {\n            width: 130,\n            filter: 'agNumberColumnFilter'\n          },\n          medalColumn: {\n            width: 100,\n            columnGroupShow: 'open',\n            filter: false\n          },\n          nonEditableColumn: {\n            editable: false\n          },\n          dateColumn: {\n            filter: 'agDateColumnFilter',\n            filterParams: {\n              comparator: function (filterLocalDateAtMidnight, cellValue) {\n                var dateParts = cellValue.split('/');\n                var day = Number(dateParts[0]);\n                var month = Number(dateParts[1]) - 1;\n                var year = Number(dateParts[2]);\n                var cellDate = new Date(year, month, day);\n\n                if (cellDate < filterLocalDateAtMidnight) {\n                  return -1;\n                } else if (cellDate > filterLocalDateAtMidnight) {\n                  return 1;\n                } else {\n                  return 0;\n                }\n              }\n            }\n          }\n        },\n        rowData: rowData,\n        onGridReady: onGridReady,\n        children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n          headerName: \"Employee Name\",\n          field: \"employee_name\",\n          checkboxSelection: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          headerName: \"Mobile No.\",\n          field: \"mobile_number\",\n          type: \"numberColumn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          headerName: \"Employee Age\",\n          field: \"employee_age\",\n          type: \"numberColumn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          headerName: \"Email\",\n          field: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          headerName: \"Date\",\n          field: \"date\",\n          type: ['dateColumn', 'nonEditableColumn'],\n          width: 220\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Modal heading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            onChange: handleChange,\n            value: state.name,\n            placeholder: \"name input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DataGrid, \"jh23DvrhUtdN6kz7D5KmTVwGxZ4=\", true);\n\n_c = DataGrid;\nexport default DataGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataGrid\");","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js"],"names":["React","useState","useEffect","render","axios","AgGridColumn","AgGridReact","API_BASE_URL","Form","Modal","Button","DataGrid","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","showModal","setShow","handleClose","handleShow","state","setState","email","name","password","confirmPassword","successMessage","employeeEdit","handleSubmit","errors","useForm","onGridReady","params","api","columnApi","updateData","data","fetch","then","resp","json","onButtonClick","e","selectedNodes","getSelectedNodes","selectedData","map","node","selectedDataStringPresentation","employee_name","employee_age","join","alert","onDeleteClick","self","employeeData","console","log","id","delete","response","status","window","location","reload","catch","error","handleChange","target","value","height","width","editable","filter","floatingFilter","resizable","marryChildren","numberColumn","medalColumn","columnGroupShow","nonEditableColumn","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","day","Number","month","year","cellDate","Date","onSubmit"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport {API_BASE_URL } from '../../constants/apiConstants';\nimport { Form,Modal, Button } from \"react-bootstrap\";\n\nconst DataGrid = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState([]);\n    \n    const [showModal, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    const [state , setState] = useState({\n      email : \"\",\n      name : \"\",\n      password : \"\",\n      confirmPassword: \"\",\n      successMessage: null\n  })\n\n  const { employeeEdit, handleSubmit, errors } = useForm();\n   \n\n    // const [rowData, setRowData] = useState([\n    //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n    //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n    //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n    // ]);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    \n        const updateData = (data) => {\n          setRowData(data);\n        };\n        //fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n         fetch(API_BASE_URL+'api/employees')\n        .then((resp) => resp.json())\n        .then((data) => updateData(data));\n    };    \n\n    // useEffect(() => {\n    //     fetch('https://www.ag-grid.com/example-assets/row-data.json')\n    //     .then(result => result.json())\n    //     .then(rowData => setRowData(rowData))\n    // }, []);\n\n    const onButtonClick = e => {\n        const selectedNodes = gridApi.getSelectedNodes()\n        const selectedData = selectedNodes.map( node => node.data )\n        const selectedDataStringPresentation = selectedData.map( node => `${node.employee_name} ${node.employee_age}`).join(', ')\n        alert(`Selected nodes: ${selectedDataStringPresentation}`)\n    }\n\n    const onDeleteClick = e => {\n        let self =this;\n        const selectedNodes = gridApi.getSelectedNodes()\n        const selectedData = selectedNodes.map( node => node.data )\n        const selectedDataStringPresentation = selectedData.map((employeeData)=>{\n            console.log(employeeData.id)\n            let id = employeeData.id;\n             axios.delete(API_BASE_URL+'api/employees/'+id)\n             .then(function (response) {\n                 if(response.status === 202){\n                     //self.setState({ deleteMessage: response.data.message }) \n                     //self.getEmployees();\n                     window.location.reload(); \n                 } \n             })\n             .catch(function (error) {\n                 console.log(error);\n             });\n        });\n        //alert(`Selected nodes: ${selectedDataStringPresentation}`)\n    } \n\n    const handleChange = e => { \n       this.setState({name: e.target.value}) \n    }\n\n\n    return (<>\n        <div className=\"ag-theme-alpine\" style={{ height: 600, width: 1040 }}>\n            <button className=\"btn btn-primary\" onClick={onButtonClick}>Get selected rows</button>\n            <button className=\"btn btn-danger\" onClick={onDeleteClick}>Delete Rows</button>\n            <button className=\"btn btn-warning\" onClick={handleShow}>Edit Row</button>\n            <AgGridReact\n            rowSelection=\"multiple\"\n            defaultColDef={{\n              width: 150,\n              editable: true,\n              filter: 'agTextColumnFilter',\n              floatingFilter: true,\n              resizable: true,\n            }}\n            defaultColGroupDef={{ marryChildren: true }}\n            columnTypes={{\n              numberColumn: {\n                width: 130,\n                filter: 'agNumberColumnFilter',\n              },\n              medalColumn: {\n                width: 100,\n                columnGroupShow: 'open',\n                filter: false,\n              },\n              nonEditableColumn: { editable: false },\n              dateColumn: {\n                filter: 'agDateColumnFilter',\n                filterParams: {\n                  comparator: function (filterLocalDateAtMidnight, cellValue) {\n                    var dateParts = cellValue.split('/');\n                    var day = Number(dateParts[0]);\n                    var month = Number(dateParts[1]) - 1;\n                    var year = Number(dateParts[2]);\n                    var cellDate = new Date(year, month, day);\n                    if (cellDate < filterLocalDateAtMidnight) {\n                      return -1;\n                    } else if (cellDate > filterLocalDateAtMidnight) {\n                      return 1;\n                    } else {\n                      return 0;\n                    }\n                  },\n                },\n              },\n            }}\n            rowData={rowData}\n            onGridReady={onGridReady}\n          >\n            <AgGridColumn headerName=\"Employee Name\" field=\"employee_name\" checkboxSelection={ true }/>\n            <AgGridColumn headerName=\"Mobile No.\" field=\"mobile_number\" type=\"numberColumn\"/>\n            <AgGridColumn headerName=\"Employee Age\" field=\"employee_age\" type=\"numberColumn\" />\n            <AgGridColumn headerName=\"Email\" field=\"email\" />\n            <AgGridColumn\n              headerName=\"Date\"\n              field=\"date\"\n              type={['dateColumn', 'nonEditableColumn']}\n              width={220}\n            />\n            \n            {/* <AgGridColumn headerName=\"Medals\" groupId=\"medalsGroup\">\n              <AgGridColumn headerName=\"Gold\" field=\"gold\" type=\"medalColumn\" />\n              <AgGridColumn\n                headerName=\"Silver\"\n                field=\"silver\"\n                type=\"medalColumn\"\n              />\n              <AgGridColumn\n                headerName=\"Bronze\"\n                field=\"bronze\"\n                type=\"medalColumn\"\n              />\n              <AgGridColumn\n                headerName=\"Total\"\n                field=\"total\"\n                type=\"medalColumn\"\n                columnGroupShow=\"closed\"\n              />\n            </AgGridColumn> */}\n          </AgGridReact>\n        </div>\n        \n          {/* <div className=\"modal\" tabIndex=\"-1\" show={showModal} onHide={handleClose}>\n            <div className=\"modal-dialog\">\n              <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                  <h5 className=\"modal-title\">Modal title</h5>\n                  <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                  </button>\n                </div>\n                <div className=\"modal-body\">\n                  <p>Modal body text goes here.</p>\n                </div>\n                <div className=\"modal-footer\">\n                  <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                  <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\n                </div>\n              </div>\n            </div>\n          </div> */}\n\n       <Modal show={showModal} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n          <Form.Group onSubmit={handleSubmit(onSubmit)}>\n              <Form.Label>Name: </Form.Label>\n              <Form.Control type=\"text\" onChange={handleChange} value={state.name} placeholder=\"name input\"/>           \n          </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n          </Button>\n          </Modal.Footer>\n      </Modal>\n        </>\n    );\n};\n\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}