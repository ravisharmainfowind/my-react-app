{"ast":null,"code":"const BASE_URL = 'http://localhost:8000/';\nconst Service = {\n  get: para => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + para.url, {\n      method: \"GET\",\n      headers: header\n    }).then(response => response.json(), error => {\n      throw new Error(error);\n    });\n  },\n  post: para => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + para.url, {\n      method: \"POST\",\n      headers: header,\n      body: para.body\n    }).then(response => response.json());\n  },\n  post: para => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + para.url, {\n      method: \"POST\",\n      headers: header,\n      body: para.body\n    }).then(response => response.json());\n  },\n  delete: para => {\n    let header = {\n      \"content-type\": \"application/json\",\n      \"accept\": \"application/json\"\n    };\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      header[\"x-access-token\"] = token;\n    }\n\n    return fetch(BASE_URL + para.url, {\n      method: \"DELETE\",\n      headers: header\n    }).then(response => response.json(), error => {\n      throw new Error(error);\n    });\n  },\n\n  getImage(image) {\n    return BASE_URL + '/' + image;\n  }\n\n};\nconst Storage = {\n  isLogedin: para => {\n    return localStorage.getItem('token') !== null;\n  },\n  set: (key, value) => {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n  get: (key, value) => {\n    return JSON.parse(localStorage.getItem(key));\n  },\n  setString: (key, value) => {\n    localStorage.setItem(key, value);\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('auth');\n  }\n};\nexport { Service, Storage };","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/services/Service.js"],"names":["BASE_URL","Service","get","para","header","token","localStorage","getItem","fetch","url","method","headers","then","response","json","error","Error","post","body","delete","getImage","image","Storage","isLogedin","set","key","value","setItem","JSON","stringify","parse","setString","logout","removeItem"],"mappings":"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","sourcesContent":["\r\n const BASE_URL = 'http://localhost:8000/';\r\n\r\n\r\nconst Service = {\r\n    get: (para) => {\r\n\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token = localStorage.getItem('token');\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n        return fetch(BASE_URL + para.url, {\r\n            method: \"GET\",\r\n            headers: header\r\n        })\r\n        .then(\r\n            response => response.json(),\r\n            error => {\r\n                throw new Error(error)\r\n            }\r\n        );\r\n    },\r\n    post: (para) => {\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token = localStorage.getItem('token');\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n\r\n        return fetch(BASE_URL + para.url, {\r\n            method: \"POST\",\r\n            headers: header,\r\n            body: para.body\r\n        })\r\n        .then(response => response.json())\r\n    },\r\n\r\n    post: (para) => {\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token = localStorage.getItem('token');\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n\r\n        return fetch(BASE_URL + para.url, {\r\n            method: \"POST\",\r\n            headers: header,\r\n            body: para.body\r\n        })\r\n        .then(response => response.json())\r\n    },\r\n\r\n    delete: (para) => {\r\n\r\n        let header = {\r\n            \"content-type\": \"application/json\",\r\n            \"accept\": \"application/json\"\r\n        };\r\n\r\n        let token = localStorage.getItem('token');\r\n        if(token) {\r\n            header[\"x-access-token\"] = token;\r\n        }\r\n        return fetch(BASE_URL + para.url, {\r\n            method: \"DELETE\",\r\n            headers: header\r\n        })\r\n        .then(\r\n            response => response.json(),\r\n            error => {\r\n                throw new Error(error)\r\n            }\r\n        );\r\n    },\r\n\r\n    getImage(image) {\r\n        return BASE_URL + '/' + image;\r\n    }\r\n};\r\n\r\nconst Storage = {\r\n    isLogedin: (para) => {  \r\n        return localStorage.getItem('token') !== null;\r\n    },\r\n    set: (key, value) => {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    },\r\n    get: (key, value) => {\r\n        return JSON.parse(localStorage.getItem(key));\r\n    },\r\n    setString: (key, value) => {\r\n        localStorage.setItem(key, value);\r\n    },\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('auth');\r\n    }\r\n};\r\n\r\nexport {Service, Storage};\r\n"]},"metadata":{},"sourceType":"module"}