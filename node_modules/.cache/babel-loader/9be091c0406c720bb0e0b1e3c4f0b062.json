{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react'; // Hook\n\nexport const useDebounce = (value, delay) => {\n  _s();\n\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n};\n\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\n\nexport const useComponentWillMount = func => {\n  _s2();\n\n  const willMount = useRef(true);\n\n  if (willMount.current) {\n    func();\n  }\n\n  willMount.current = false;\n};\n\n_s2(useComponentWillMount, \"R8B7fseD8tnPE8cedvq+MNChpwI=\");","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/utils.js"],"names":["React","useState","useEffect","useRef","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useComponentWillMount","func","willMount","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAAA;;AACzC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAACI,KAAD,CAApD;AAEAH,EAAAA,SAAS,CACL,MAAM;AACF;AACA,UAAMO,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACH,KAFyB,EAEvBC,KAFuB,CAA1B,CAFE,CAMF;AACA;AACA;;AACA,WAAO,MAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAbI,EAcL,CAACJ,KAAD,EAAQC,KAAR,CAdK,CAcU;AAdV,GAAT;AAiBA,SAAOC,cAAP;AACH,CAtBM;;GAAMH,W;;AAwBb,OAAO,MAAMQ,qBAAqB,GAAGC,IAAI,IAAI;AAAA;;AACzC,QAAMC,SAAS,GAAGX,MAAM,CAAC,IAAD,CAAxB;;AAEA,MAAIW,SAAS,CAACC,OAAd,EAAuB;AACnBF,IAAAA,IAAI;AACP;;AAEDC,EAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACH,CARM;;IAAMH,qB","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n// Hook\nexport const useDebounce = (value, delay) => {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}\n\nexport const useComponentWillMount = func => {\n    const willMount = useRef(true);\n\n    if (willMount.current) {\n        func();\n    }\n\n    willMount.current = false;\n};\n"]},"metadata":{},"sourceType":"module"}