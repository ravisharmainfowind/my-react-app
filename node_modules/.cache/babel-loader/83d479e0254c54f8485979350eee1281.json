{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { API_BASE_URL } from '../../constants/apiConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DataGrid = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState([]); // const [rowData, setRowData] = useState([\n  //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n  //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n  //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n  // ]);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n\n    const updateData = data => {\n      setRowData(data);\n    }; //fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n\n\n    fetch(API_BASE_URL + 'api/employees').then(resp => resp.json()).then(data => updateData(data));\n  }; // useEffect(() => {\n  //     fetch('https://www.ag-grid.com/example-assets/row-data.json')\n  //     .then(result => result.json())\n  //     .then(rowData => setRowData(rowData))\n  // }, []);\n\n\n  const onButtonClick = e => {\n    const selectedNodes = gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    const selectedDataStringPresentation = selectedData.map(node => `${node.employee_name} ${node.employee_age}`).join(', ');\n    alert(`Selected nodes: ${selectedDataStringPresentation}`);\n  };\n\n  const onDeleteClick = e => {\n    let self = this;\n    const selectedNodes = gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    const selectedDataStringPresentation = selectedData.map(employeeData => {\n      console.log(id);\n      axios.delete(API_BASE_URL + 'api/employees/' + id).then(function (response) {\n        if (response.status === 202) {\n          self.setState({\n            deleteMessage: response.data.message\n          });\n          self.getEmployees();\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }); //alert(`Selected nodes: ${selectedDataStringPresentation}`)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 600,\n      width: 1040\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: onButtonClick,\n      children: \"Get selected rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger\",\n      onClick: onDeleteClick,\n      children: \"Delete Rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowSelection: \"multiple\",\n      defaultColDef: {\n        width: 150,\n        editable: true,\n        filter: 'agTextColumnFilter',\n        floatingFilter: true,\n        resizable: true\n      },\n      defaultColGroupDef: {\n        marryChildren: true\n      },\n      columnTypes: {\n        numberColumn: {\n          width: 130,\n          filter: 'agNumberColumnFilter'\n        },\n        medalColumn: {\n          width: 100,\n          columnGroupShow: 'open',\n          filter: false\n        },\n        nonEditableColumn: {\n          editable: false\n        },\n        dateColumn: {\n          filter: 'agDateColumnFilter',\n          filterParams: {\n            comparator: function (filterLocalDateAtMidnight, cellValue) {\n              var dateParts = cellValue.split('/');\n              var day = Number(dateParts[0]);\n              var month = Number(dateParts[1]) - 1;\n              var year = Number(dateParts[2]);\n              var cellDate = new Date(year, month, day);\n\n              if (cellDate < filterLocalDateAtMidnight) {\n                return -1;\n              } else if (cellDate > filterLocalDateAtMidnight) {\n                return 1;\n              } else {\n                return 0;\n              }\n            }\n          }\n        }\n      },\n      rowData: rowData,\n      onGridReady: onGridReady,\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        headerName: \"Employee Name\",\n        field: \"employee_name\",\n        checkboxSelection: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        headerName: \"Mobile No.\",\n        field: \"mobile_number\",\n        type: \"numberColumn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        headerName: \"Employee Age\",\n        field: \"employee_age\",\n        type: \"numberColumn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        headerName: \"Email\",\n        field: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        headerName: \"Date\",\n        field: \"date\",\n        type: ['dateColumn', 'nonEditableColumn'],\n        width: 220\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DataGrid, \"p0FHZQQm3TIhPRV0sibaJc7i11Y=\");\n\n_c = DataGrid;\nexport default DataGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataGrid\");","map":{"version":3,"sources":["/opt/lampp/htdocs/my-app/src/components/DataGrid/DataGrid.js"],"names":["React","useState","useEffect","render","AgGridColumn","AgGridReact","API_BASE_URL","DataGrid","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","onGridReady","params","api","columnApi","updateData","data","fetch","then","resp","json","onButtonClick","e","selectedNodes","getSelectedNodes","selectedData","map","node","selectedDataStringPresentation","employee_name","employee_age","join","alert","onDeleteClick","self","employeeData","console","log","id","axios","delete","response","status","setState","deleteMessage","message","getEmployees","catch","error","height","width","editable","filter","floatingFilter","resizable","marryChildren","numberColumn","medalColumn","columnGroupShow","nonEditableColumn","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateParts","split","day","Number","month","year","cellDate","Date"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { render } from 'react-dom';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport {API_BASE_URL } from '../../constants/apiConstants';\n\nconst DataGrid = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState([]);\n\n    // const [rowData, setRowData] = useState([\n    //     { make: \"Toyota\", model: \"Celica\", price: 35000 },\n    //     { make: \"Ford\", model: \"Mondeo\", price: 32000 },\n    //     { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n    // ]);\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    \n        const updateData = (data) => {\n          setRowData(data);\n        };\n        //fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')\n         fetch(API_BASE_URL+'api/employees')\n        .then((resp) => resp.json())\n        .then((data) => updateData(data));\n    };    \n\n    // useEffect(() => {\n    //     fetch('https://www.ag-grid.com/example-assets/row-data.json')\n    //     .then(result => result.json())\n    //     .then(rowData => setRowData(rowData))\n    // }, []);\n\n    const onButtonClick = e => {\n        const selectedNodes = gridApi.getSelectedNodes()\n        const selectedData = selectedNodes.map( node => node.data )\n        const selectedDataStringPresentation = selectedData.map( node => `${node.employee_name} ${node.employee_age}`).join(', ')\n        alert(`Selected nodes: ${selectedDataStringPresentation}`)\n    }\n\n    const onDeleteClick = e => {\n        let self =this;\n        const selectedNodes = gridApi.getSelectedNodes()\n        const selectedData = selectedNodes.map( node => node.data )\n        const selectedDataStringPresentation = selectedData.map((employeeData)=>{\n            console.log(id)\n            \n             axios.delete(API_BASE_URL+'api/employees/'+id)\n             .then(function (response) {\n                 if(response.status === 202){\n                     self.setState({ deleteMessage: response.data.message }) \n                     self.getEmployees(); \n                 } \n             })\n             .catch(function (error) {\n                 console.log(error);\n             });\n        });\n        //alert(`Selected nodes: ${selectedDataStringPresentation}`)\n    } \n\n\n    return (\n        <div className=\"ag-theme-alpine\" style={{ height: 600, width: 1040 }}>\n            <button className=\"btn btn-primary\" onClick={onButtonClick}>Get selected rows</button>\n            <button className=\"btn btn-danger\" onClick={onDeleteClick}>Delete Rows</button>\n            <AgGridReact\n            rowSelection=\"multiple\"\n            defaultColDef={{\n              width: 150,\n              editable: true,\n              filter: 'agTextColumnFilter',\n              floatingFilter: true,\n              resizable: true,\n            }}\n            defaultColGroupDef={{ marryChildren: true }}\n            columnTypes={{\n              numberColumn: {\n                width: 130,\n                filter: 'agNumberColumnFilter',\n              },\n              medalColumn: {\n                width: 100,\n                columnGroupShow: 'open',\n                filter: false,\n              },\n              nonEditableColumn: { editable: false },\n              dateColumn: {\n                filter: 'agDateColumnFilter',\n                filterParams: {\n                  comparator: function (filterLocalDateAtMidnight, cellValue) {\n                    var dateParts = cellValue.split('/');\n                    var day = Number(dateParts[0]);\n                    var month = Number(dateParts[1]) - 1;\n                    var year = Number(dateParts[2]);\n                    var cellDate = new Date(year, month, day);\n                    if (cellDate < filterLocalDateAtMidnight) {\n                      return -1;\n                    } else if (cellDate > filterLocalDateAtMidnight) {\n                      return 1;\n                    } else {\n                      return 0;\n                    }\n                  },\n                },\n              },\n            }}\n            rowData={rowData}\n            onGridReady={onGridReady}\n          >\n            <AgGridColumn headerName=\"Employee Name\" field=\"employee_name\" checkboxSelection={ true }/>\n            <AgGridColumn headerName=\"Mobile No.\" field=\"mobile_number\" type=\"numberColumn\"/>\n            <AgGridColumn headerName=\"Employee Age\" field=\"employee_age\" type=\"numberColumn\" />\n            <AgGridColumn headerName=\"Email\" field=\"email\" />\n            <AgGridColumn\n              headerName=\"Date\"\n              field=\"date\"\n              type={['dateColumn', 'nonEditableColumn']}\n              width={220}\n            />\n            {/* <AgGridColumn headerName=\"Medals\" groupId=\"medalsGroup\">\n              <AgGridColumn headerName=\"Gold\" field=\"gold\" type=\"medalColumn\" />\n              <AgGridColumn\n                headerName=\"Silver\"\n                field=\"silver\"\n                type=\"medalColumn\"\n              />\n              <AgGridColumn\n                headerName=\"Bronze\"\n                field=\"bronze\"\n                type=\"medalColumn\"\n              />\n              <AgGridColumn\n                headerName=\"Total\"\n                field=\"total\"\n                type=\"medalColumn\"\n                columnGroupShow=\"closed\"\n              />\n            </AgGridColumn> */}\n          </AgGridReact>\n        </div>\n    );\n};\n\nexport default DataGrid;"]},"metadata":{},"sourceType":"module"}